KLUSTERNUM := `basename $(pwd)`

init:
	#!/usr/bin/env sh
	read -p "API Key: " -s PACKET_API_KEY && export PACKET_API_KEY=${PACKET_API_KEY}
	clusterctl init --infrastructure packet

config:
	#!/usr/bin/env sh
	set -e
	source .env
	if [[ -z $PROJECT_ID ]]; then
		echo "Project ID not configured in .env"
		exit -1
	fi

	clusterctl config cluster kluster-{{ KLUSTERNUM }} \
		--kubernetes-version v1.20.4 \
		--control-plane-machine-count=1 \
		--worker-machine-count=3 \
		> cluster.yaml
	sed -i '' -e 's/socat jq/socat jq lvm2/g' cluster.yaml

kubeconfig:
	clusterctl get kubeconfig kluster-{{ KLUSTERNUM }} > kubeconfig

cluster-create: config
	kubectl apply -f cluster.yaml

cluster-prepare: kubeconfig cilium rook metallb

cilium:
	helm template cilium/cilium  \
		--version 1.8.5 \
		--namespace cilium \
		--set image.repository=docker.io/cilium/cilium \
		--set global.ipam.mode=cluster-pool \
		--set global.ipam.operator.clusterPoolIPv4PodCIDR=192.168.0.0/16 \
		--set global.ipam.operator.clusterPoolIPv4MaskSize=23 \
		--set global.nativeRoutingCIDR=192.168.0.0/16 \
		--set global.endpointRoutes.enabled=true \
		--set global.hubble.relay.enabled=true \
		--set global.hubble.enabled=true \
		--set global.hubble.listenAddress=":4244" \
		--set global.hubble.ui.enabled=true \
		> cilium.yaml
	kubectl --kubeconfig=./kubeconfig apply --wait -f ./cilium.yaml

rook:
	kubectl --kubeconfig=./kubeconfig apply --wait -f https://raw.githubusercontent.com/rook/rook/master/cluster/examples/kubernetes/ceph/crds.yaml
	kubectl --kubeconfig=./kubeconfig apply --wait -f https://raw.githubusercontent.com/rook/rook/master/cluster/examples/kubernetes/ceph/common.yaml
	kubectl --kubeconfig=./kubeconfig apply --wait -f https://raw.githubusercontent.com/rook/rook/master/cluster/examples/kubernetes/ceph/operator.yaml
	kubectl --kubeconfig=./kubeconfig apply --wait -f https://raw.githubusercontent.com/rook/rook/master/cluster/examples/kubernetes/ceph/cluster.yaml
	kubectl --kubeconfig=./kubeconfig apply --wait -f https://raw.githubusercontent.com/rook/rook/master/cluster/examples/kubernetes/ceph/toolbox.yaml
	kubectl --kubeconfig=./kubeconfig apply --wait -f ./ceph-blockpool.yaml

metallb:
	kubectl --kubeconfig=./kubeconfig patch clusterroles system:cloud-controller-manager --patch-file=./ccm-patch.yaml
	kubectl --kubeconfig=./kubeconfig apply --wait -f https://raw.githubusercontent.com/equinix/cloud-provider-equinix-metal/v1.1.0/lb/manifests.yaml

workload:
	kubectl --kubeconfig=./kubeconfig apply -f ../000-workload/opt/kubernetes

teleport:
	#!/usr/bin/env bash
	# Install the Teleport leader
	LEADER_IP=$(kubectl --kubeconfig=./kubeconfig get nodes -o wide --no-headers | head -n1 | awk '{ print $7}')
	LEADER_MANAGEMENT_IP=$(ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -l root ${LEADER_IP} -C "curl -s https://metadata.platformequinix.com/metadata | jq -r '.network.addresses | map(select(.public==true,.management==true)) | first | .address'")

	SECRET_TOKEN=$(openssl rand -hex 32 | tr ':' '-')
	INSTALL_TELEPORT=$(cat <<EOF
	curl https://deb.releases.teleport.dev/teleport-pubkey.asc | apt-key add -
	add-apt-repository 'deb https://deb.releases.teleport.dev/ stable main'
	DEBIAN_FRONTEND=noninteractive apt-get update && apt-get install -y teleport
	EOF
	)

	ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -l root ${LEADER_IP} <<EOF
	${INSTALL_TELEPORT}

	cat > /etc/teleport.yaml <<EOCAT
	teleport:
	  data_dir: /var/lib/teleport
	auth_service:
	  enabled: true
	  cluster_name: "klustered-{{ KLUSTERNUM }}"
	  listen_addr: 0.0.0.0:3025
	  tokens:
	    - proxy,node,app:${SECRET_TOKEN}
	ssh_service:
	  enabled: true
	app_service:
	  enabled: true
	  debug_app: true
	proxy_service:
	  enabled: true
	  public_addr: ${LEADER_MANAGEMENT_IP}
	  listen_addr: 0.0.0.0:3023
	  web_listen_addr: 0.0.0.0:3080
	  tunnel_listen_addr: 0.0.0.0:3024
	EOCAT

	systemctl restart teleport

	sleep 2

	tctl users add rawkode root

	EOF

	for NODE_IP in $(kubectl --kubeconfig=./kubeconfig get nodes -o wide --no-headers | tail -n +2 | awk '{ print $7}'); do

	ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -l root ${NODE_IP} <<EOF
	${INSTALL_TELEPORT}
	cat > /etc/teleport.yaml <<EOCAT
	auth_service:
	  enabled: false

	proxy_service:
	  enabled: false

	ssh_service:
	  enabled: true

	teleport:
	  auth_token: "${SECRET_TOKEN}"
	  auth_servers:
	    - "${LEADER_MANAGEMENT_IP}:3025"
	EOCAT

	systemctl restart teleport
	EOF
	done
